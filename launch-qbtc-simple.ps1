# QBTC QUANTUM TRADING SYSTEM LAUNCHER
# Simple version without special Unicode characters
# Port range: 14000-14999 (anti-conflict)

param(
    [string]$Mode = "BALANCED",
    [switch]$DryRun,
    [string]$LogLevel = "INFO",
    [int]$StartupDelay = 2
)

# Service Configuration with Safe Ports
$ServiceConfig = @{
    CoreServices = @{
        MasterControl = @{
            Name = "Master Control Hub"
            Script = "core/master-control-hub.js"
            Port = 14001
            HealthEndpoint = "/health"
        }
        MessageBus = @{
            Name = "Message Bus Event Hub"
            Script = "core/message-bus.js"
            Port = 14002
            HealthEndpoint = "/status"
        }
    }
    AnalysisEngines = @{
        QuantumAnalysis = @{
            Name = "Quantum Analysis Server"
            Script = "analysis-engine/quantum-analysis-server.js"
            Port = 14101
            HealthEndpoint = "/quantum/health"
        }
        ConsciousnessEngine = @{
            Name = "Consciousness Engine"
            Script = "analysis-engine/consciousness-engine.js"
            Port = 14102
            HealthEndpoint = "/consciousness/health"
        }
    }
    ExecutionEngines = @{
        TradingExecutor = @{
            Name = "Trading Engine Executor"
            Script = "execution-engine/trading-executor.js"
            Port = 14201
            HealthEndpoint = "/trading/health"
        }
        PositionManager = @{
            Name = "Position Manager"
            Script = "execution-engine/position-manager.js"
            Port = 14202
            HealthEndpoint = "/positions/health"
        }
    }
    Dashboards = @{
        MasterDashboard = @{
            Name = "Master Control Dashboard"
            Script = "frontend/dashboard-server.js"
            Port = 14401
            HealthEndpoint = "/dashboard/health"
        }
    }
}

$RunningProcesses = @{}

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$Level] $Message"
}

function Test-PortAvailability {
    param([int]$Port)
    try {
        $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $Port)
        $listener.Start()
        $listener.Stop()
        return $true
    } catch {
        return $false
    }
}

function Start-QBTCService {
    param([hashtable]$Service, [string]$ServiceName)
    
    if ($DryRun) {
        Write-Log "[DRY RUN] Would start: $($Service.Name) on port $($Service.Port)" "INFO"
        return $true
    }
    
    $scriptPath = Join-Path $PWD $Service.Script
    if (-not (Test-Path $scriptPath)) {
        Write-Log "Script not found: $scriptPath. Creating placeholder..." "WARN"
        
        $placeholderDir = Split-Path $scriptPath -Parent
        if (-not (Test-Path $placeholderDir)) {
            New-Item -ItemType Directory -Path $placeholderDir -Force | Out-Null
        }
        
        $placeholderContent = @"
// QBTC Service Placeholder: $($Service.Name)
// Auto-generated by launch script
// Port: $($Service.Port)

import express from 'express';
const app = express();
const PORT = $($Service.Port);

app.use(express.json());

app.get('$($Service.HealthEndpoint)', (req, res) => {
    res.json({
        status: 'healthy',
        service: '$($Service.Name)',
        port: PORT,
        timestamp: new Date().toISOString(),
        version: '1.0.0-placeholder'
    });
});

app.get('/status', (req, res) => {
    res.json({
        service: '$($Service.Name)',
        status: 'running',
        port: PORT,
        uptime: process.uptime()
    });
});

app.get('/', (req, res) => {
    res.json({
        message: 'QBTC $($Service.Name) - Placeholder Service',
        port: PORT,
        endpoints: ['$($Service.HealthEndpoint)', '/status'],
        note: 'This is a placeholder service. Implement actual logic here.'
    });
});

app.listen(PORT, () => {
    console.log('$($Service.Name) placeholder running on port ' + PORT);
    console.log('Health check: http://localhost:' + PORT + '$($Service.HealthEndpoint)');
});

process.on('SIGTERM', () => {
    console.log('Graceful shutdown initiated...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('Received SIGINT, shutting down...');
    process.exit(0);
});
"@
        Set-Content -Path $scriptPath -Value $placeholderContent -Encoding UTF8
        Write-Log "Created placeholder: $scriptPath" "SUCCESS"
    }
    
    try {
        Write-Log "Starting: $($Service.Name) on port $($Service.Port)..." "INFO"
        
        if (-not (Test-Path "logs")) {
            New-Item -ItemType Directory -Path "logs" -Force | Out-Null
        }
        
        $process = Start-Process -FilePath "node" -ArgumentList $Service.Script -WindowStyle Hidden -PassThru -RedirectStandardOutput "logs/$ServiceName-output.log" -RedirectStandardError "logs/$ServiceName-error.log"
        
        $global:RunningProcesses[$ServiceName] = @{
            Process = $process
            Service = $Service
            StartTime = Get-Date
        }
        
        Start-Sleep -Seconds 1
        
        if ($process.HasExited) {
            Write-Log "Failed to start: $($Service.Name)" "ERROR"
            return $false
        } else {
            Write-Log "Started successfully: $($Service.Name) (PID: $($process.Id))" "SUCCESS"
            return $true
        }
    } catch {
        Write-Log "Error starting $($Service.Name): $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Test-ServicesHealth {
    if ($DryRun) { return $true }
    
    Write-Log "Performing health checks..." "INFO"
    $healthyServices = 0
    
    foreach ($serviceName in $global:RunningProcesses.Keys) {
        $service = $global:RunningProcesses[$serviceName].Service
        try {
            $healthUrl = "http://localhost:$($service.Port)$($service.HealthEndpoint)"
            $response = Invoke-RestMethod -Uri $healthUrl -TimeoutSec 5
            if ($response.status -eq "healthy") {
                Write-Log "Healthy: $($service.Name)" "SUCCESS"
                $healthyServices++
            }
        } catch {
            Write-Log "Health check failed: $($service.Name)" "ERROR"
        }
    }
    
    Write-Log "Health Summary: $healthyServices/$($global:RunningProcesses.Count) services healthy" "INFO"
}

function Show-SystemStatus {
    Write-Host "`nQBTC SYSTEM STATUS" -ForegroundColor Magenta
    Write-Host "===========================================" -ForegroundColor Magenta
    
    foreach ($serviceName in $global:RunningProcesses.Keys) {
        $serviceInfo = $global:RunningProcesses[$serviceName]
        $service = $serviceInfo.Service
        $process = $serviceInfo.Process
        
        $status = if ($process.HasExited) { "STOPPED" } else { "RUNNING" }
        $uptime = if ($process.HasExited) { "N/A" } else { "$(((Get-Date) - $serviceInfo.StartTime).ToString('hh\:mm\:ss'))" }
        
        Write-Host "$($service.Name) | Port: $($service.Port) | Status: $status | Uptime: $uptime"
        if (-not $process.HasExited) {
            Write-Host "  -> http://localhost:$($service.Port)$($service.HealthEndpoint)"
        }
    }
}

function Stop-QBTCSystem {
    Write-Log "Initiating graceful shutdown..." "INFO"
    
    foreach ($serviceName in $global:RunningProcesses.Keys) {
        $process = $global:RunningProcesses[$serviceName].Process
        $service = $global:RunningProcesses[$serviceName].Service
        
        if (-not $process.HasExited) {
            Write-Log "Stopping: $($service.Name)..." "INFO"
            try {
                $process.Kill()
                Write-Log "Stopped: $($service.Name)" "SUCCESS"
            } catch {
                Write-Log "Error stopping $($service.Name): $($_.Exception.Message)" "ERROR"
            }
        }
    }
}

# Main execution
Write-Host "QBTC QUANTUM TRADING SYSTEM LAUNCHER" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "Mode: $Mode | LogLevel: $LogLevel | DryRun: $DryRun" -ForegroundColor Yellow

# Check Node.js
try {
    $nodeVersion = node --version 2>$null
    if ($nodeVersion) {
        Write-Log "Node.js detected: $nodeVersion" "SUCCESS"
    } else {
        Write-Log "Node.js not found!" "ERROR"
        exit 1
    }
} catch {
    Write-Log "Node.js not found!" "ERROR"
    exit 1
}

# Check critical ports
$criticalPorts = @(14001, 14002, 14101, 14401)
$conflicts = @()
foreach ($port in $criticalPorts) {
    if (-not (Test-PortAvailability -Port $port)) {
        $conflicts += $port
    }
}

if ($conflicts.Count -gt 0) {
    Write-Log "Port conflicts detected: $($conflicts -join ', ')" "ERROR"
    exit 1
} else {
    Write-Log "All critical ports available" "SUCCESS"
}

Write-Log "Starting QBTC system..." "INFO"
$totalStarted = 0

# Start services
foreach ($categoryName in $ServiceConfig.Keys) {
    $services = $ServiceConfig[$categoryName]
    Write-Log "Starting $categoryName..." "INFO"
    
    foreach ($serviceName in $services.Keys) {
        if (Start-QBTCService -Service $services[$serviceName] -ServiceName $serviceName) {
            $totalStarted++
        }
        if ($StartupDelay -gt 0) {
            Start-Sleep -Seconds $StartupDelay
        }
    }
}

Write-Log "STARTUP COMPLETE! Total services started: $totalStarted" "SUCCESS"

if (-not $DryRun) {
    Start-Sleep -Seconds 3
    Test-ServicesHealth
    
    Write-Host "`nPRIMARY ACCESS POINTS:" -ForegroundColor Green
    Write-Host "Master Dashboard: http://localhost:14401" -ForegroundColor Green
    Write-Host "Quantum Analysis: http://localhost:14101/quantum/health" -ForegroundColor Green
    Write-Host "Trading Engine: http://localhost:14201/trading/health" -ForegroundColor Green
    
    Show-SystemStatus
    
    Write-Host "`nPress Ctrl+C to shutdown the system gracefully" -ForegroundColor Yellow
    
    try {
        while ($true) {
            Start-Sleep -Seconds 10
            # Monitor processes
        }
    } catch [System.Management.Automation.PipelineStoppedException] {
        Write-Log "Shutdown signal received..." "INFO"
    } finally {
        Stop-QBTCSystem
    }
} else {
    Write-Log "DRY RUN COMPLETED - No actual services started" "SUCCESS"
}
