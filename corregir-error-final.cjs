const fs = require('fs');

console.log('üîß Corrigiendo error de sintaxis final...');

const htmlFile = 'monitor-quantum-intelligence-llm-debug.html';
let content = fs.readFileSync(htmlFile, 'utf8');

// Extraer solo el c√≥digo JavaScript
const scriptMatch = content.match(/<script>([\s\S]*?)<\/script>/);
if (!scriptMatch) {
    console.log('‚ùå No se encontr√≥ la secci√≥n <script>');
    process.exit(1);
}

const jsCode = scriptMatch[1];
console.log(`üìä C√≥digo JavaScript extra√≠do: ${jsCode.length} caracteres`);

// Contar llaves
const openBraces = (jsCode.match(/\{/g) || []).length;
const closeBraces = (jsCode.match(/\}/g) || []).length;

console.log(`üìä Llaves abiertas: ${openBraces}`);
console.log(`üìä Llaves cerradas: ${closeBraces}`);
console.log(`üìä Diferencia: ${openBraces - closeBraces}`);

if (openBraces > closeBraces) {
    console.log('üîß Agregando llave faltante...');
    
    // Buscar el final del script y agregar la llave faltante
    const scriptEndIndex = content.lastIndexOf('</script>');
    if (scriptEndIndex !== -1) {
        const beforeScript = content.substring(0, scriptEndIndex);
        const afterScript = content.substring(scriptEndIndex);
        
        // Agregar la llave faltante antes del cierre del script
        const correctedContent = beforeScript + '\n        }\n    ' + afterScript;
        
        fs.writeFileSync(htmlFile, correctedContent);
        console.log('‚úÖ Llave faltante agregada');
    } else {
        console.log('‚ùå No se pudo encontrar el cierre del script');
    }
} else if (closeBraces > openBraces) {
    console.log('üîß Eliminando llave extra...');
    
    // Buscar y eliminar la √∫ltima llave extra
    const lastBraceIndex = content.lastIndexOf('}');
    if (lastBraceIndex !== -1) {
        const beforeBrace = content.substring(0, lastBraceIndex);
        const afterBrace = content.substring(lastBraceIndex + 1);
        
        const correctedContent = beforeBrace + afterBrace;
        fs.writeFileSync(htmlFile, correctedContent);
        console.log('‚úÖ Llave extra eliminada');
    }
} else {
    console.log('‚úÖ Las llaves est√°n balanceadas');
}

// Verificar el resultado
const newContent = fs.readFileSync(htmlFile, 'utf8');
const newScriptMatch = newContent.match(/<script>([\s\S]*?)<\/script>/);
if (newScriptMatch) {
    const newJsCode = newScriptMatch[1];
    const newOpenBraces = (newJsCode.match(/\{/g) || []).length;
    const newCloseBraces = (newJsCode.match(/\}/g) || []).length;
    
    console.log('\nüìä VERIFICACI√ìN FINAL:');
    console.log(`   ‚Ä¢ Llaves abiertas: ${newOpenBraces}`);
    console.log(`   ‚Ä¢ Llaves cerradas: ${newCloseBraces}`);
    console.log(`   ‚Ä¢ Balance: ${newOpenBraces === newCloseBraces ? '‚úÖ CORRECTO' : '‚ùå DESBALANCEADO'}`);
}

// Verificar si el archivo termina correctamente
const finalContent = fs.readFileSync(htmlFile, 'utf8');
if (!finalContent.trim().endsWith('</html>')) {
    console.log('‚ö†Ô∏è  El archivo no termina con </html>');
    console.log('üîß Agregando cierre de HTML...');
    
    const correctedContent = finalContent + '\n</html>';
    fs.writeFileSync(htmlFile, correctedContent);
    console.log('‚úÖ Cierre de HTML agregado');
} else {
    console.log('‚úÖ El archivo termina correctamente con </html>');
}
