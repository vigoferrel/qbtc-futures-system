#!/usr/bin/env node

/**
 * ‚öôÔ∏è QBTC CREDENTIALS SETUP - ROBUST IMPLEMENTATION
 * ================================================
 *
 * Configuraci√≥n robusta de credenciales Binance
 * - Validaci√≥n autom√°tica
 * - Encriptaci√≥n de datos
 * - Sistema de respaldo
 * - Verificaci√≥n de conectividad
 */

import QBTCCredentialsManager from './credentials-manager.js';
import readline from 'readline';
import fs from 'fs';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

class QBTCCredentialsSetup {
    constructor() {
        this.manager = QBTCCredentialsManager;
    }

    /**
     * ‚ùì Funci√≥n para hacer preguntas
     */
    question(prompt) {
        return new Promise((resolve) => {
            rl.question(prompt, (answer) => {
                resolve(answer.trim());
            });
        });
    }

    /**
     * üéØ Inicia el proceso de configuraci√≥n
     */
    async startSetup() {
        console.log('‚öôÔ∏è QBTC CREDENTIALS ROBUST SETUP');
        console.log('===============================\n');

        console.log('üîê Este asistente configurar√° tus credenciales de Binance de forma segura.\n');

        // Verificar credenciales existentes
        await this.checkExistingCredentials();

        // Preguntar si quiere configurar nuevas credenciales
        const configureNew = await this.question('‚ùì ¬øQuieres configurar nuevas credenciales? (y/n): ');

        if (configureNew.toLowerCase() === 'y' || configureNew.toLowerCase() === 'yes') {
            await this.configureNewCredentials();
        } else {
            console.log('\nüìã CONFIGURACI√ìN MANUAL:');
            console.log('=======================');
            console.log('Para configurar manualmente:');
            console.log('1. Edita el archivo .binance-config.json');
            console.log('2. O usa el comando: node core/credentials-manager.js');
        }

        rl.close();
    }

    /**
     * üîç Verifica credenciales existentes
     */
    async checkExistingCredentials() {
        console.log('üîç Verificando credenciales existentes...\n');

        try {
            const credentials = this.manager.getActiveCredentials();
            console.log('‚úÖ Credenciales encontradas:');
            console.log(`   üìç Fuente: ${credentials.source}`);
            console.log(`   üåê Testnet: ${credentials.testnet ? 'S√ç' : 'NO'}`);
            console.log(`   ‚úÖ Validadas: ${credentials.validated ? 'S√ç' : 'NO'}\n`);

            // Probar conectividad
            console.log('üß™ Probando conectividad...');
            const testResult = await this.manager.testConnectivity(credentials, credentials.testnet);

            if (testResult.success) {
                console.log('‚úÖ CONECTIVIDAD EXITOSA');
                console.log(`üí∞ Balance: $${parseFloat(testResult.balance || 0).toLocaleString()}`);
                console.log(`üè¶ Tipo de cuenta: ${testResult.accountType || 'FUTURES'}\n`);
            } else {
                console.log('‚ùå PROBLEMA DE CONECTIVIDAD');
                console.log(`üö® Error: ${testResult.error}`);
                console.log(`üìù Mensaje: ${testResult.message}\n`);
            }

        } catch (error) {
            console.log('‚ùå No se encontraron credenciales v√°lidas\n');
        }
    }

    /**
     * üîß Configura nuevas credenciales
     */
    async configureNewCredentials() {
        console.log('\nüîß CONFIGURACI√ìN DE NUEVAS CREDENCIALES');
        console.log('=====================================\n');

        // Informaci√≥n importante
        console.log('üìã INFORMACI√ìN IMPORTANTE:');
        console.log('==========================');
        console.log('‚Ä¢ Las API Keys deben tener exactamente 64 caracteres');
        console.log('‚Ä¢ Solo caracteres alfanum√©ricos (A-Z, a-z, 0-9)');
        console.log('‚Ä¢ Las credenciales se encriptar√°n autom√°ticamente');
        console.log('‚Ä¢ Se crear√° un sistema de respaldo autom√°tico\n');

        // Preguntar por testnet o mainnet
        const useTestnet = await this.question('üåê ¬øUsar Testnet para pruebas? (y/n) [Recomendado: y]: ');
        const isTestnet = useTestnet.toLowerCase() !== 'n' && useTestnet.toLowerCase() !== 'no';

        if (isTestnet) {
            console.log('\nüß™ MODO TESTNET ACTIVADO');
            console.log('Obt√©n tus credenciales en: https://testnet.binance.vision/\n');
        } else {
            console.log('\nüí∞ MODO PRODUCCI√ìN ACTIVADO');
            console.log('Obt√©n tus credenciales en: https://www.binance.com/en/my/settings/api-management\n');
        }

        // Ingresar API Key
        let apiKey = '';
        let apiKeyValid = false;

        while (!apiKeyValid) {
            apiKey = await this.question('üîë Ingresa tu API Key (64 caracteres): ');

            if (!apiKey) {
                console.log('‚ùå API Key es requerida\n');
                continue;
            }

            const validation = this.manager.validateCredentials(apiKey, 'dummy_secret');
            if (validation.valid) {
                apiKeyValid = true;
                console.log('‚úÖ API Key v√°lida\n');
            } else {
                console.log('‚ùå API Key inv√°lida:');
                validation.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
                console.log('');
            }
        }

        // Ingresar Secret Key
        let secretKey = '';
        let secretKeyValid = false;

        while (!secretKeyValid) {
            secretKey = await this.question('üîê Ingresa tu Secret Key (64 caracteres): ');

            if (!secretKey) {
                console.log('‚ùå Secret Key es requerida\n');
                continue;
            }

            const validation = this.manager.validateCredentials('dummy_api', secretKey);
            if (validation.valid) {
                secretKeyValid = true;
                console.log('‚úÖ Secret Key v√°lida\n');
            } else {
                console.log('‚ùå Secret Key inv√°lida:');
                validation.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
                console.log('');
            }
        }

        // Configurar credenciales
        console.log('‚öôÔ∏è Configurando credenciales...\n');

        try {
            const result = await this.manager.setupCredentials(apiKey, secretKey, isTestnet);

            console.log('‚úÖ CREDENCIALES CONFIGURADAS EXITOSAMENTE');
            console.log('======================================');
            console.log(`üí∞ Balance de cuenta: $${parseFloat(result.balance || 0).toLocaleString()}`);
            console.log(`üè¶ Tipo de cuenta: ${result.accountType || 'FUTURES'}`);
            console.log(`üåê Entorno: ${isTestnet ? 'TESTNET' : 'PRODUCCI√ìN'}`);
            console.log(`üîí Encriptaci√≥n: ACTIVADA`);
            console.log(`üíæ Respaldo: CREADO\n`);

            // Archivos creados
            console.log('üìÅ ARCHIVOS CREADOS:');
            console.log('===================');
            const files = [
                '.binance-config-primary.json',
                '.binance-config-primary-encrypted.json',
                '.binance-config-backup.json'
            ];

            files.forEach(file => {
                const exists = fs.existsSync(file);
                console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
            });

            console.log('\nüöÄ PR√ìXIMOS PASOS:');
            console.log('==================');
            console.log('1. Reinicia cualquier servidor que use estas credenciales');
            console.log('2. Prueba la conectividad: node core/credentials-test-robust.js');
            console.log('3. Monitorea el estado: El sistema verificar√° autom√°ticamente cada 5 minutos');

            if (!isTestnet) {
                console.log('\n‚ö†Ô∏è RECUERDA PARA PRODUCCI√ìN:');
                console.log('   ‚Ä¢ Configurar IP whitelist en Binance');
                console.log('   ‚Ä¢ Activar 2FA en tu cuenta');
                console.log('   ‚Ä¢ Nunca compartir las credenciales');
            }

        } catch (error) {
            console.log('‚ùå ERROR EN CONFIGURACI√ìN:');
            console.log(`   ${error.message}\n`);

            console.log('üîß POSIBLES SOLUCIONES:');
            console.log('======================');
            if (error.message.includes('IP_RESTRICTION')) {
                console.log('   ‚Ä¢ Configura IP whitelist en Binance');
                console.log('   ‚Ä¢ O usa testnet para pruebas');
            } else if (error.message.includes('API_ERROR')) {
                console.log('   ‚Ä¢ Verifica que las credenciales sean correctas');
                console.log('   ‚Ä¢ Aseg√∫rate de que tengas permisos de Futures');
            } else {
                console.log('   ‚Ä¢ Verifica tu conexi√≥n a internet');
                console.log('   ‚Ä¢ Intenta nuevamente en unos minutos');
            }
        }
    }
}

// Ejecutar configuraci√≥n
const setup = new QBTCCredentialsSetup();
setup.startSetup().catch(console.error);