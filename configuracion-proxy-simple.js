#!/usr/bin/env node

/**
 * üöÄ CONFIGURACI√ìN SIMPLE DE PROXY PARA BINANCE
 * ============================================
 *
 * Configuraci√≥n directa usando la IP autorizada: 181.43.243.243
 */

import https from 'https';
import { HttpsProxyAgent } from 'https-proxy-agent';
import crypto from 'crypto';

// Configuraci√≥n usando la IP autorizada del usuario
const PROXY_CONFIG = {
  proxyUrl: 'http://181.43.243.243:8080',
  binance: {
    apiKey: "LUFHLzW721iW8fj1RslpKllR1IBSRUAxeVef7wgdrv59HJjmKkmOCIM8zjQ59B0Q",
    secretKey: "maNaQIFdSvfwkUP36Xqt9Gd0YATu1qk13HyIZJuOit6SQldLr8oTQPmVjLZLkcEu",
    testnet: false
  }
};

// Funci√≥n para crear firma HMAC-SHA256
function createSignature(queryString, secretKey) {
  return crypto.createHmac('sha256', secretKey)
               .update(queryString)
               .digest('hex');
}

// Funci√≥n para probar conexi√≥n a Binance usando proxy
async function testBinanceWithProxy() {
  return new Promise((resolve, reject) => {
    const timestamp = Date.now();
    const params = { timestamp };

    // Crear query string
    const queryString = Object.keys(params)
      .sort()
      .map(key => `${key}=${encodeURIComponent(params[key])}`)
      .join('&');

    // Crear firma
    const signature = createSignature(queryString, PROXY_CONFIG.binance.secretKey);
    const finalQuery = `${queryString}&signature=${signature}`;

    const options = {
      hostname: PROXY_CONFIG.binance.testnet ? 'testnet.binance.vision' : 'fapi.binance.com',
      port: 443,
      path: `/fapi/v2/account?${finalQuery}`,
      method: 'GET',
      headers: {
        'X-MBX-APIKEY': PROXY_CONFIG.binance.apiKey,
        'Content-Type': 'application/json',
        'User-Agent': 'QBTC-Quantum-Trader/1.0'
      },
      agent: new HttpsProxyAgent(PROXY_CONFIG.proxyUrl),
      timeout: 15000
    };

    console.log('üåê Probando conexi√≥n con proxy...');
    console.log(`üì° Proxy: ${PROXY_CONFIG.proxyUrl}`);
    console.log(`üéØ Endpoint: https://${options.hostname}${options.path}`);

    const req = https.request(options, (res) => {
      let data = '';

      console.log(`üì° Status HTTP: ${res.statusCode}`);

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          console.log('üì° Respuesta de Binance:');
          console.log(JSON.stringify(response, null, 2));
          resolve(response);
        } catch (error) {
          console.error('üì° Error parseando respuesta:', error.message);
          console.error('üì° Datos crudos:', data);
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      console.error('üö® Error de conexi√≥n:', error.message);
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      console.error('‚è∞ Timeout en conexi√≥n');
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

// Funci√≥n principal
async function configurarProxySimple() {
  console.log('üöÄ CONFIGURACI√ìN SIMPLE DE PROXY PARA BINANCE');
  console.log('============================================\n');

  console.log('üéØ IP autorizada en Binance: 181.43.243.243');
  console.log('üåê Configurando proxy: http://181.43.243.243:8080\n');

  try {
    console.log('üîÑ Probando conexi√≥n a Binance usando proxy...\n');

    const accountInfo = await testBinanceWithProxy();

    if (accountInfo.code === -2015) {
      console.log('\n‚ùå ERROR -2015: Restricci√≥n de IP a√∫n activa');
      console.log('üí° El proxy puede estar usando una IP diferente');
      console.log('üîß Verifica que el proxy est√© configurado correctamente');

      console.log('\nüí° SOLUCIONES:');
      console.log('   1. Verifica que el servidor proxy est√© usando la IP 181.43.243.243');
      console.log('   2. Configura el proxy para que use exactamente esa IP');
      console.log('   3. Prueba con un proxy diferente');

    } else if (accountInfo.code) {
      console.log(`\n‚ùå Error de Binance: C√≥digo ${accountInfo.code}`);
      console.log(`üìù Mensaje: ${accountInfo.msg}`);

    } else {
      console.log('\nüéâ ¬°CONEXI√ìN EXITOSA CON PROXY!');
      console.log('‚úÖ Las claves funcionan correctamente con proxy');

      console.log('\nüìä INFORMACI√ìN DE CUENTA:');
      console.log(`üí∞ Balance total: $${parseFloat(accountInfo.totalWalletBalance || 0).toLocaleString()}`);
      console.log(`üìà P&L no realizado: $${parseFloat(accountInfo.totalUnrealizedProfit || 0).toLocaleString()}`);
      console.log(`üíµ Balance disponible: $${parseFloat(accountInfo.availableBalance || 0).toLocaleString()}`);
      console.log(`üìä Posiciones abiertas: ${accountInfo.positions?.filter(p => parseFloat(p.positionAmt) !== 0).length || 0}`);

      // Crear configuraci√≥n de producci√≥n con proxy
      const configProduccion = {
        apiKey: PROXY_CONFIG.binance.apiKey,
        secretKey: PROXY_CONFIG.binance.secretKey,
        testnet: false,
        proxy: PROXY_CONFIG.proxyUrl,
        timeout: 15000,
        workingProxy: true
      };

      // Guardar configuraci√≥n
      const fs = await import('fs');
      fs.writeFileSync('.binance-config-production.json', JSON.stringify(configProduccion, null, 2));

      console.log('\nüíæ Configuraci√≥n guardada en .binance-config-production.json');

      console.log('\nüîÑ PR√ìXIMOS PASOS:');
      console.log('   1. Copia la configuraci√≥n a .binance-config.json');
      console.log('   2. Reinicia el servidor API');
      console.log('   3. Los endpoints usar√°n datos reales v√≠a proxy');

      console.log('\nüìã COMANDO PARA ACTIVAR:');
      console.log('   copy .binance-config-production.json .binance-config.json');
      console.log('   node api/leonardo-api-simple.js');

    }

  } catch (error) {
    console.log('\n‚ùå Error en configuraci√≥n de proxy:');
    console.log(`   ${error.message}`);

    if (error.message.includes('ENOTFOUND')) {
      console.log('üí° Problema: No se puede resolver el dominio del proxy');
      console.log('üîß Verifica que la IP del proxy sea correcta');
    } else if (error.message.includes('ECONNREFUSED')) {
      console.log('üí° Problema: El proxy rechaza la conexi√≥n');
      console.log('üîß Verifica que el puerto del proxy sea correcto (8080)');
    } else if (error.message.includes('Timeout')) {
      console.log('üí° Problema: El proxy est√° lento o no responde');
      console.log('üîß Prueba con un proxy diferente');
    }

    console.log('\nüí° RECOMENDACIONES:');
    console.log('   1. Verifica que el servidor proxy est√© funcionando');
    console.log('   2. Confirma que la IP 181.43.243.243 est√© autorizada en Binance');
    console.log('   3. Prueba con otro puerto si 8080 no funciona');
    console.log('   4. El sistema funciona perfectamente con datos simulados');
  }
}

// Ejecutar configuraci√≥n
configurarProxySimple().catch(console.error);

